{"version":3,"sources":["webpack:///worker-groupLinks.js","webpack:///webpack/bootstrap 9c81549f207a2e9dac72?c2d8","webpack:///./src/workers/groupChunkLinks.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","openDb","Promise","resolve","reject","req","indexedDB","open","onsuccess","evt","this","result","onerror","Error","target","errorCode","getLinks","db","startIdx","endIdx","store","transaction","objectStore","getAll","IDBKeyRange","bound","computeBatch","links","urlsNodeId","linksId","Map","linksValue","forEach","link","fromId","source","toId","destination","linkKey","linkId","get","count","size","set","push","from","to","onmessage","e","data","analysisId","then","groupLinks","postMessage","error","catch","JSON","stringify"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,QAAA,EAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,QAAA,EAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,WAGAV,EAAA,KDMM,SAASI,EAAQD,GAEtB,YE9CD,SAASQ,GAAON,GACd,MAAO,IAAIO,SAAQ,SAASC,EAASC,GACnC,GAAIC,GAAMC,UAAUC,KAAK,YAAcZ,EAAI,GAC3CU,GAAIG,UAAY,SAAUC,GACxBN,EAAQO,KAAKC,SAEfN,EAAIO,QAAU,SAAUH,GACtBL,EAAO,GAAIS,OAAJ,0BAAoCJ,EAAIK,OAAOC,eAK5D,QAASC,GAASC,EAAIC,EAAUC,GAC9B,MAAO,IAAIjB,SAAQ,SAASC,EAASC,GACnC,GAAIgB,GAAQH,EAAGI,aAAa,SAAU,YAAYC,YAAY,SAC1DjB,EAAMe,EAAMG,OAAOC,YAAYC,MAAMP,EAAUC,GAAQ,GAAO,GAClEd,GAAIG,UAAY,SAAUC,GACxBN,EAAQO,KAAKC,SAEfN,EAAIO,QAAU,SAAUH,GACtBL,EAAO,GAAIS,OAAJ,6BAAuCJ,EAAIK,OAAOC,eAK/D,QAASW,GAAaC,EAAOC,GAC3B,GAAMC,GAAU,GAAIC,KACdC,IAqBN,OAnBAJ,GAAMK,QAAQ,SAACC,GACb,GAAMC,GAASN,EAAWK,EAAKE,SAAW,UACpCC,EAAOR,EAAWK,EAAKI,cAAgB,UACvCC,EAAaJ,EAAb,IAAuBE,EAEzBG,EAASV,EAAQW,IAAIF,EACpBC,GASHR,EAAWQ,EAAS,GAAGE,SARvBF,EAASV,EAAQa,KAAO,EACxBb,EAAQc,IAAIL,EAASC,GACrBR,EAAWa,MACTC,KAAMX,EACNY,GAAIV,EACJK,MAAO,OAONV,EAITgB,UAAY,SAASC,GACnB,IACE/C,EAAO+C,EAAEC,KAAKC,YACbC,KAAK,SAAAlC,GAAA,MAAMD,GAASC,EAAI+B,EAAEC,KAAK/B,SAAU8B,EAAEC,KAAK9B,UAChDgC,KAAK,SAAAxB,GAAA,MAASD,GAAaC,EAAOqB,EAAEC,KAAKrB,cACzCuB,KAAK,SAAAC,GAAA,MAAcC,cAClBC,MAAO,KACP3C,OAAQyC,MAETG,MAAM,SAAAD,GAAA,MAASD,cACdC,MAAOE,KAAKC,UAAUH,GACtB3C,OAAQ,SAEV,MAAO2C,GACPD,aACEC,MAAOE,KAAKC,UAAUH,GACtB3C,OAAQ","file":"worker-groupLinks.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/static/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tfunction openDb(id) {\n\t  return new Promise(function (resolve, reject) {\n\t    var req = indexedDB.open('Analysis-' + id, 10);\n\t    req.onsuccess = function (evt) {\n\t      resolve(this.result);\n\t    };\n\t    req.onerror = function (evt) {\n\t      reject(new Error('Error while opening db ' + evt.target.errorCode));\n\t    };\n\t  });\n\t}\n\t\n\tfunction getLinks(db, startIdx, endIdx) {\n\t  return new Promise(function (resolve, reject) {\n\t    var store = db.transaction(['links'], 'readonly').objectStore('links');\n\t    var req = store.getAll(IDBKeyRange.bound(startIdx, endIdx, false, true));\n\t    req.onsuccess = function (evt) {\n\t      resolve(this.result);\n\t    };\n\t    req.onerror = function (evt) {\n\t      reject(new Error('Error while reading links ' + evt.target.errorCode));\n\t    };\n\t  });\n\t}\n\t\n\tfunction computeBatch(links, urlsNodeId) {\n\t  var linksId = new Map();\n\t  var linksValue = [];\n\t\n\t  links.forEach(function (link) {\n\t    var fromId = urlsNodeId[link.source] || 'unknown';\n\t    var toId = urlsNodeId[link.destination] || 'unknown';\n\t    var linkKey = fromId + ':' + toId;\n\t\n\t    var linkId = linksId.get(linkKey);\n\t    if (!linkId) {\n\t      linkId = linksId.size + 1; // make ids start at 1\n\t      linksId.set(linkKey, linkId);\n\t      linksValue.push({\n\t        from: fromId,\n\t        to: toId,\n\t        count: 1\n\t      });\n\t    } else {\n\t      linksValue[linkId - 1].count++;\n\t    }\n\t  });\n\t\n\t  return linksValue;\n\t}\n\t\n\tonmessage = function onmessage(e) {\n\t  try {\n\t    openDb(e.data.analysisId).then(function (db) {\n\t      return getLinks(db, e.data.startIdx, e.data.endIdx);\n\t    }).then(function (links) {\n\t      return computeBatch(links, e.data.urlsNodeId);\n\t    }).then(function (groupLinks) {\n\t      return postMessage({\n\t        error: null,\n\t        result: groupLinks\n\t      });\n\t    }).catch(function (error) {\n\t      return postMessage({\n\t        error: JSON.stringify(error),\n\t        result: null\n\t      });\n\t    });\n\t  } catch (error) {\n\t    postMessage({\n\t      error: JSON.stringify(error),\n\t      result: null\n\t    });\n\t  }\n\t};\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// worker-groupLinks.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/static/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9c81549f207a2e9dac72","function openDb(id) {\n  return new Promise(function(resolve, reject) {\n    var req = indexedDB.open('Analysis-' + id, 10);\n    req.onsuccess = function (evt) {\n      resolve(this.result);\n    };\n    req.onerror = function (evt) {\n      reject(new Error(`Error while opening db ${evt.target.errorCode}`));\n    };\n  });\n}\n\nfunction getLinks(db, startIdx, endIdx) {\n  return new Promise(function(resolve, reject) {\n    var store = db.transaction(['links'], 'readonly').objectStore('links');\n    var req = store.getAll(IDBKeyRange.bound(startIdx, endIdx, false, true));\n    req.onsuccess = function (evt) {\n      resolve(this.result);\n    };\n    req.onerror = function (evt) {\n      reject(new Error(`Error while reading links ${evt.target.errorCode}`));\n    };\n  });\n}\n\nfunction computeBatch(links, urlsNodeId) {\n  const linksId = new Map();\n  const linksValue = [];\n\n  links.forEach((link) => {\n    const fromId = urlsNodeId[link.source] || 'unknown';\n    const toId = urlsNodeId[link.destination] || 'unknown';\n    const linkKey = `${fromId}:${toId}`;\n\n    let linkId = linksId.get(linkKey);\n    if (!linkId) {\n      linkId = linksId.size + 1; // make ids start at 1\n      linksId.set(linkKey, linkId);\n      linksValue.push({\n        from: fromId,\n        to: toId,\n        count: 1,\n      });\n    } else {\n      linksValue[linkId - 1].count++;\n    }\n  });\n\n  return linksValue;\n}\n\n\nonmessage = function(e) {\n  try {\n    openDb(e.data.analysisId)\n    .then(db => getLinks(db, e.data.startIdx, e.data.endIdx))\n    .then(links => computeBatch(links, e.data.urlsNodeId))\n    .then(groupLinks => postMessage({\n      error: null,\n      result: groupLinks,\n    }))\n    .catch(error => postMessage({\n      error: JSON.stringify(error),\n      result: null,\n    }));\n  } catch (error) {\n    postMessage({\n      error: JSON.stringify(error),\n      result: null,\n    });\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/workers/groupChunkLinks.js"],"sourceRoot":""}